basePath: /api
definitions:
  handlers.APIError:
    properties:
      message:
        type: string
      status:
        type: integer
      success:
        type: boolean
    type: object
  handlers.ClientSummary:
    properties:
      client_id:
        type: string
      client_name:
        type: string
      order_count:
        type: integer
      total_spent:
        type: number
    type: object
  handlers.CreateClientRequest:
    properties:
      Note:
        type: string
      address:
        type: string
      contactInfo:
        type: string
      image:
        minLength: 5
        type: string
      name:
        type: string
      surname:
        type: string
    required:
    - name
    - surname
    type: object
  handlers.CreateUserRequest:
    properties:
      image:
        minLength: 5
        type: string
      password:
        maxLength: 100
        minLength: 4
        type: string
      role:
        allOf:
        - $ref: '#/definitions/model.Role'
        enum:
        - admin
        - manager
        - seller
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - role
    - username
    type: object
  handlers.DashboardResponse:
    properties:
      top_clients:
        items:
          $ref: '#/definitions/handlers.ClientSummary'
        type: array
      top_products:
        items:
          $ref: '#/definitions/handlers.ProductSummary'
        type: array
    type: object
  handlers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  handlers.LoginResponse:
    properties:
      message:
        example: success
        type: string
      status:
        example: 200
        type: integer
      token:
        example: JWTOKEN
        type: string
    type: object
  handlers.ProductStatistics:
    properties:
      name:
        example: Wooden Table
        type: string
      producedQuantity:
        example: 120.5
        type: number
      productId:
        example: d6c9b3be-652f-45d4-8384-a5eab99f03a6
        type: string
      soldQuantity:
        example: 95.3
        type: number
    type: object
  handlers.ProductSummary:
    properties:
      product_id:
        type: string
      product_name:
        type: string
      total_sold:
        type: number
      units_sold:
        type: integer
    type: object
  handlers.SalesData:
    properties:
      date:
        type: string
      total_amount:
        type: number
    type: object
  handlers.UpdateClientRequest:
    properties:
      Note:
        type: string
      address:
        minLength: 5
        type: string
      contactInfo:
        type: string
      image:
        minLength: 5
        type: string
      name:
        minLength: 2
        type: string
      surname:
        type: string
    required:
    - surname
    type: object
  handlers.UpdateProductRequest:
    properties:
      amount:
        minimum: 0
        type: number
      categoryId:
        type: string
      height:
        type: string
      image:
        minLength: 5
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      price:
        minimum: 0
        type: number
      unit:
        enum:
        - piece
        - meter
        type: string
      width:
        type: string
    type: object
  handlers.UpdateUserRequest:
    properties:
      image:
        minLength: 5
        type: string
      password:
        maxLength: 100
        minLength: 4
        type: string
      role:
        allOf:
        - $ref: '#/definitions/model.Role'
        enum:
        - admin
        - manager
        - seller
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - role
    - username
    type: object
  model.Category:
    properties:
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    required:
    - name
    type: object
  model.Client:
    properties:
      address:
        type: string
      balance:
        type: integer
      contactInfo:
        type: string
      createdAt:
        type: string
      id:
        type: string
      image:
        minLength: 5
        type: string
      name:
        type: string
      note:
        type: string
      purchaseHistory:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      salespersonId:
        type: string
      surname:
        type: string
      updatedAt:
        type: string
    required:
    - name
    - surname
    type: object
  model.CreateOrderItemRequest:
    properties:
      productId:
        example: 123e4567-e89b-12d3-a456-426614174003
        type: string
      quantity:
        example: 10
        type: number
    required:
    - productId
    - quantity
    type: object
  model.CreateOrderRequest:
    properties:
      clientId:
        example: 123e4567-e89b-12d3-a456-426614174001
        type: string
      paymentMethod:
        enum:
        - cash
        - transfer
        - credit
        example: cash
        type: string
      products:
        items:
          $ref: '#/definitions/model.CreateOrderItemRequest'
        type: array
      salespersonId:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      status:
        enum:
        - pending
        - in_production
        - completed
        - paid
        example: pending
        type: string
    required:
    - clientId
    - paymentMethod
    - products
    - salespersonId
    - status
    type: object
  model.CreateProductRequest:
    properties:
      amount:
        example: 10
        minimum: 0
        type: number
      categoryId:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      height:
        example: "100"
        type: string
      image:
        example: uploads/image.jpg
        minLength: 5
        type: string
      name:
        example: Example Product
        maxLength: 100
        minLength: 3
        type: string
      price:
        example: 19.99
        minimum: 0
        type: number
      unit:
        enum:
        - piece
        - meter
        example: piece
        type: string
      width:
        example: "50"
        type: string
    required:
    - amount
    - categoryId
    - name
    - unit
    type: object
  model.Order:
    properties:
      client:
        $ref: '#/definitions/model.Client'
      clientId:
        type: string
      createdAt:
        type: string
      id:
        type: string
      paymentMethod:
        enum:
        - cash
        - transfer
        - credit
        type: string
      products:
        items:
          $ref: '#/definitions/model.OrderItem'
        type: array
      salesperson:
        $ref: '#/definitions/model.User'
      salespersonId:
        type: string
      status:
        enum:
        - pending
        - in_production
        - completed
        - paid
        type: string
      totalPrice:
        type: number
      updatedAt:
        type: string
    required:
    - clientId
    - paymentMethod
    - status
    type: object
  model.OrderItem:
    properties:
      id:
        type: string
      orderId:
        type: string
      product:
        $ref: '#/definitions/model.Product'
      productId:
        type: string
      quantity:
        type: number
      totalPrice:
        description: |-
          Unit      string     `json:"unit" validate:"required, oneof=piece meter"`
          PricePerUnit float64    `json:"pricePerUnit"`
        type: number
    required:
    - productId
    type: object
  model.Product:
    properties:
      amount:
        minimum: 0
        type: number
      category:
        $ref: '#/definitions/model.Category'
      categoryId:
        type: string
      createdAt:
        type: string
      height:
        type: string
      id:
        type: string
      image:
        minLength: 5
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      price:
        minimum: 0
        type: number
      unit:
        enum:
        - piece
        - meter
        type: string
      updatedAt:
        type: string
      width:
        type: string
    required:
    - amount
    - categoryId
    - name
    - unit
    type: object
  model.Role:
    enum:
    - admin
    - manager
    - seller
    type: string
    x-enum-varnames:
    - AdminRole
    - Manager
    - Seller
  model.User:
    properties:
      clients:
        items:
          $ref: '#/definitions/model.Client'
        type: array
      createdAt:
        type: string
      id:
        type: string
      image:
        minLength: 5
        type: string
      orders:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      role:
        $ref: '#/definitions/model.Role'
      updatedAt:
        type: string
      username:
        type: string
    type: object
host: ec2-43-207-54-55.ap-northeast-1.compute.amazonaws.com
info:
  contact: {}
  description: This is a sample swagger for Fiber
  termsOfService: http://swagger.io/terms/
  title: Fiber CRM-API
  version: "1.0"
paths:
  /categories:
    get:
      description: Эта функция позволяет получить список всех категорий с поддержкой
        пагинации.
      parameters:
      - description: Номер страницы
        in: query
        name: page
        type: integer
      - description: Размер страницы
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список категорий
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при получении категорий
          schema:
            additionalProperties: true
            type: object
      summary: Получить все категории
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Эта функция позволяет создать новую категорию.
      parameters:
      - description: Данные категории
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Категория успешно создана
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Некорректные данные запроса
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Категория с таким именем уже существует
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при создании категории
          schema:
            additionalProperties: true
            type: object
      summary: Создать категорию
      tags:
      - Categories
  /categories/{id}:
    delete:
      description: Эта функция позволяет удалить категорию из базы данных по её уникальному
        идентификатору.
      parameters:
      - description: UUID категории
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Категория успешно удалена
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Некорректный формат UUID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при удалении категории
          schema:
            additionalProperties: true
            type: object
      summary: Удалить категорию
      tags:
      - Categories
    get:
      description: Эта функция позволяет получить информацию о категории по её уникальному
        идентификатору.
      parameters:
      - description: UUID категории
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о категории
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Некорректный формат UUID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Категория не найдена
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при получении категории
          schema:
            additionalProperties: true
            type: object
      summary: Получить категорию
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Эта функция позволяет обновить данные категории по её уникальному
        идентификатору.
      parameters:
      - description: UUID категории
        in: path
        name: id
        required: true
        type: string
      - description: Новые данные категории
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: Категория успешно обновлена
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Некорректные данные запроса
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Категория не найдена
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Имя категории уже используется
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при обновлении категории
          schema:
            additionalProperties: true
            type: object
      summary: Обновить категорию
      tags:
      - Categories
  /clients:
    get:
      description: Эта функция возвращает список всех клиентов с поддержкой пагинации.
        Продавцы видят только своих клиентов.
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список клиентов с информацией о пагинации
          schema:
            items:
              $ref: '#/definitions/model.Client'
            type: array
        "500":
          description: Ошибка сервера при получении списка клиентов
          schema:
            $ref: '#/definitions/handlers.APIError'
      security:
      - BearerAuth: []
      summary: Получить список клиентов
      tags:
      - Clients
    post:
      consumes:
      - application/json
      description: Эта функция позволяет продавцам и администраторам добавить нового
        клиента. Уникальные контактные данные обязательны.
      parameters:
      - description: Данные нового клиента
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateClientRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Информация о созданном клиенте
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Некорректные данные запроса
          schema:
            $ref: '#/definitions/handlers.APIError'
        "403":
          description: Недостаточно прав для создания клиента
          schema:
            $ref: '#/definitions/handlers.APIError'
        "409":
          description: Контактные данные уже используются другим клиентом
          schema:
            $ref: '#/definitions/handlers.APIError'
        "422":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка сервера при создании клиента
          schema:
            $ref: '#/definitions/handlers.APIError'
      security:
      - BearerAuth: []
      summary: Создать клиента
      tags:
      - Clients
  /clients/{id}:
    delete:
      description: Эта функция позволяет удалить клиента из базы данных по его уникальному
        идентификатору.
      parameters:
      - description: UUID клиента
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Клиент успешно удалён
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Некорректный формат UUID
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка сервера при удалении клиента
          schema:
            $ref: '#/definitions/handlers.APIError'
      security:
      - BearerAuth: []
      summary: Удалить клиента
      tags:
      - Clients
    get:
      description: Эта функция возвращает данные клиента по его уникальному идентификатору.
        Продавцы могут видеть только своих клиентов.
      parameters:
      - description: UUID клиента
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о клиенте
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Некорректный формат UUID
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Клиент не найден
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка сервера при получении данных клиента
          schema:
            $ref: '#/definitions/handlers.APIError'
      security:
      - BearerAuth: []
      summary: Получить клиента
      tags:
      - Clients
    put:
      consumes:
      - application/json
      description: Эта функция позволяет обновить информацию о клиенте, включая имя,
        контактные данные и адрес.
      parameters:
      - description: UUID клиента
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления клиента
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateClientRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Информация об обновлённом клиенте
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Некорректный формат UUID или запроса
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Клиент не найден
          schema:
            $ref: '#/definitions/handlers.APIError'
        "409":
          description: Контактные данные уже используются другим клиентом
          schema:
            $ref: '#/definitions/handlers.APIError'
        "422":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка сервера при обновлении клиента
          schema:
            $ref: '#/definitions/handlers.APIError'
      security:
      - BearerAuth: []
      summary: Обновить клиента
      tags:
      - Clients
  /clients/search:
    get:
      description: Эта функция позволяет искать клиентов по их имени, фамилии или
        контактным данным.
      parameters:
      - description: Текстовый запрос для поиска
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных клиентов
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Параметр запроса 'q' отсутствует
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка при поиске продуктов
          schema:
            additionalProperties: true
            type: object
      summary: Поиск клиентов
      tags:
      - Clients
  /exports/products:
    get:
      description: Эта функция позволяет экспортировать список продуктов в формате
        Excel
      produces:
      - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      responses:
        "200":
          description: Excel-файл с продуктами
          schema:
            type: file
        "500":
          description: Ошибка при поиске продуктов
          schema:
            additionalProperties: true
            type: object
      summary: Экспорт продуктов в Excel
      tags:
      - Exports
  /login:
    post:
      consumes:
      - application/json
      description: Эта функция позволяет пользователю войти в систему с помощью имени
        пользователя и пароля, и получить JWT-токен для дальнейшей аутентификации.
      parameters:
      - description: Данные для авторизации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная авторизация, возвращается JWT-токен
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Некорректный формат JSON
          schema:
            $ref: '#/definitions/handlers.APIError'
        "401":
          description: Неверный пароль
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Имя пользователя не найдено
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка при генерации токена
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Авторизация пользователя
      tags:
      - Auth
  /orders:
    get:
      description: Эта функция возвращает список всех заказов с поддержкой пагинации.
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список заказов с информацией о пагинации
          schema:
            items:
              $ref: '#/definitions/model.CreateOrderRequest'
            type: array
        "500":
          description: Ошибка сервера при получении списка заказов
          schema:
            $ref: '#/definitions/handlers.APIError'
      security:
      - BearerAuth: []
      summary: Получить список всех заказов
      tags:
      - Orders
    patch:
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления заказа
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Измененный объект заказа
          schema:
            $ref: '#/definitions/model.Order'
        "500":
          description: Ошибка сервера при обновлении данных
          schema:
            $ref: '#/definitions/handlers.APIError'
      security:
      - BearerAuth: []
      summary: Изменить можно любой
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Эта функция позволяет продавцам и администраторам создать новый
        заказ. Заказ должен содержать как минимум один продукт.
      parameters:
      - description: Данные нового заказа
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Информация о созданном заказе
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Неверный запрос или некорректные данные заказа
          schema:
            $ref: '#/definitions/handlers.APIError'
        "403":
          description: Недостаточно прав для создания заказа
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Один из указанных продуктов не найден
          schema:
            $ref: '#/definitions/handlers.APIError'
        "422":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка сервера при создании заказа
          schema:
            $ref: '#/definitions/handlers.APIError'
      security:
      - BearerAuth: []
      summary: Создать заказ
      tags:
      - Orders
  /orders/{id}:
    delete:
      parameters:
      - description: UUID заказа
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешно
          schema:
            $ref: '#/definitions/model.Order'
        "500":
          description: Ошибка сервера при удалении
          schema:
            $ref: '#/definitions/handlers.APIError'
      security:
      - BearerAuth: []
      summary: Удаление заказа
      tags:
      - Orders
    get:
      description: Эта функция возвращает информацию о заказе по его уникальному идентификатору.
        Заказ включает все продукты в нём.
      parameters:
      - description: UUID заказа
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о заказе
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Некорректный формат UUID
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Заказ не найден
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка сервера при получении данных заказа
          schema:
            $ref: '#/definitions/handlers.APIError'
      security:
      - BearerAuth: []
      summary: Получить заказ
      tags:
      - Orders
  /products:
    get:
      description: Эта функция возвращает список всех продуктов с пагинацией и возможностью
        подгрузки категорий
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список продуктов с информацией о пагинации
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
        "500":
          description: Ошибка сервера при получении списка продуктов
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Получить список продуктов
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Эта функция позволяет создать новый продукт
      parameters:
      - description: Данные нового продукта
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Информация о созданном продукте
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/handlers.APIError'
        "422":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка сервера при создании продукта
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Создать продукт
      tags:
      - Products
  /products/{id}:
    delete:
      description: Эта функция удаляет продукт по его уникальному идентификатору
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Сообщение об успешном удалении
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Неверный формат запроса или отсутствующий ID
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Удалить продукт
      tags:
      - Products
    get:
      description: Эта функция возвращает информацию о продукте по его уникальному
        идентификатору
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о продукте
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Неверный запрос или отсутствующий ID
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Продукт не найден
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка сервера при получении продукта
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Получить продукт
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Эта функция обновляет информацию о продукте по его уникальному
        идентификатору
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления продукта
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Информация об обновлённом продукте
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Неверный формат запроса или отсутствующий ID
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Продукт не найден
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка сервера при обновлении продукта
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Обновить продукт
      tags:
      - Products
  /products/{id}/statistics:
    get:
      description: Возвращает информацию о том, сколько продукта было произведено
        и продано за текущий месяц
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Статистика продукта
          schema:
            $ref: '#/definitions/handlers.ProductStatistics'
        "400":
          description: Неверный формат запроса или отсутствующий ID
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Продукт не найден
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Получить статистику продукта
      tags:
      - Products
  /products/search:
    get:
      description: Эта функция позволяет искать продукты на основе текстового запроса
      parameters:
      - description: Текстовый запрос для поиска
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных продуктов
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Параметр запроса 'q' отсутствует
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка при поиске продуктов
          schema:
            additionalProperties: true
            type: object
      summary: Поиск продуктов
      tags:
      - Products
  /statistics/chart:
    get:
      description: Возвращает статистику продаж за последний месяц или год
      parameters:
      - description: Период статистики (month, year)
        in: query
        name: period
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список со статистикой всех продуктов
          schema:
            items:
              items:
                $ref: '#/definitions/handlers.SalesData'
              type: array
            type: array
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Получить статистику продаж
      tags:
      - Statistics
  /statistics/dashboard:
    get:
      description: Возвращает топ 10 клиентов и продуктов по сумме потраченных денег
        и проданных единиц за текущий месяц
      parameters:
      - description: Период статистики (month, year)
        in: query
        name: period
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список со статистикой всех продуктов
          schema:
            items:
              $ref: '#/definitions/handlers.DashboardResponse'
            type: array
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Получить топ клиентов и продуктов
      tags:
      - Statistics
  /statistics/products:
    get:
      description: Возвращает статистику по всем продуктам, включая количество произведенного
        и проданного за текущий месяц
      produces:
      - application/json
      responses:
        "200":
          description: Список со статистикой всех продуктов
          schema:
            items:
              $ref: '#/definitions/handlers.ProductStatistics'
            type: array
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Получить статистику всех продуктов
      tags:
      - Statistics
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Эта функция позволяет загружать одно изображение на сервер с проверкой
        размера и типа файла
      parameters:
      - description: Файл изображения
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: 'Информация о загруженном файле: имя и URL'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный запрос или ошибка валидации
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при сохранении файла
          schema:
            additionalProperties: true
            type: object
      summary: Загрузка одной картинки
      tags:
      - Images
  /uploadMany:
    post:
      consumes:
      - multipart/form-data
      description: Эта функция позволяет загружать несколько изображений на сервер
      parameters:
      - description: Файлы изображений
        in: formData
        name: images
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Список загруженных файлов с их URL
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный запрос или ошибка валидации
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при сохранении файла
          schema:
            additionalProperties: true
            type: object
      summary: Загрузить несколько изображений
      tags:
      - Images
  /users:
    get:
      consumes:
      - application/json
      description: Возвращает список всех пользователей с поддержкой пагинации
      parameters:
      - description: Номер страницы (по умолчанию 1)
        in: query
        name: page
        type: integer
      - description: Размер страницы (по умолчанию 10)
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список пользователей
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Ошибка на сервере
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Получить список пользователей
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Создаёт нового пользователя в системе
      parameters:
      - description: Данные пользователя
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно создан
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Некорректный JSON
          schema:
            $ref: '#/definitions/handlers.APIError'
        "422":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка на сервере
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Создать пользователя
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет пользователя из системы по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь успешно удалён
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка на сервере
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Удалить пользователя
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Возвращает информацию о пользователе по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Данные пользователя
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка на сервере
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Получить пользователя
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Обновляет информацию о пользователе по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      - description: Обновляемые данные пользователя
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь успешно обновлён
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Неверный формат ID или JSON
          schema:
            $ref: '#/definitions/handlers.APIError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.APIError'
        "422":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка на сервере
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Обновить данные пользователя
      tags:
      - Users
  /users/search:
    get:
      consumes:
      - application/json
      description: Ищет пользователей по заданному запросу
      parameters:
      - description: Поисковый запрос
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Результаты поиска пользователей
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "400":
          description: Отсутствует параметр запроса 'q'
          schema:
            $ref: '#/definitions/handlers.APIError'
        "500":
          description: Ошибка при поиске пользователей
          schema:
            $ref: '#/definitions/handlers.APIError'
      summary: Поиск пользователей
      tags:
      - Users
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
