definitions:
  handlers.CreateUserRequest:
    properties:
      password:
        maxLength: 100
        minLength: 4
        type: string
      role:
        allOf:
        - $ref: '#/definitions/model.Role'
        enum:
        - admin
        - manager
        - seller
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - role
    - username
    type: object
  handlers.UpdateUserRequest:
    properties:
      password:
        maxLength: 100
        minLength: 4
        type: string
      role:
        allOf:
        - $ref: '#/definitions/model.Role'
        enum:
        - admin
        - manager
        - seller
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - role
    - username
    type: object
  model.Category:
    properties:
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    required:
    - name
    type: object
  model.Client:
    properties:
      address:
        type: string
      contactInfo:
        type: string
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      purchaseHistory:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      salespersonId:
        type: string
      updatedAt:
        type: string
    required:
    - name
    type: object
  model.Order:
    properties:
      client:
        $ref: '#/definitions/model.Client'
      clientId:
        type: string
      createdAt:
        type: string
      id:
        type: string
      paymentMethod:
        enum:
        - cash
        - transfer
        - credit
        type: string
      products:
        items:
          $ref: '#/definitions/model.OrderItem'
        type: array
      salesperson:
        $ref: '#/definitions/model.User'
      salespersonId:
        type: string
      status:
        enum:
        - pending
        - in_production
        - completed
        - paid
        type: string
      totalPrice:
        type: number
      updatedAt:
        type: string
    required:
    - clientId
    - paymentMethod
    - status
    type: object
  model.OrderItem:
    properties:
      id:
        type: string
      orderId:
        type: string
      product:
        $ref: '#/definitions/model.Product'
      productId:
        type: string
      quantity:
        type: number
      totalPrice:
        description: PricePerUnit float64    `json:"pricePerUnit"`
        type: number
      unit:
        type: string
    required:
    - productId
    - unit
    type: object
  model.Product:
    properties:
      amount:
        minimum: 0
        type: number
      category:
        $ref: '#/definitions/model.Category'
      categoryId:
        type: string
      createdAt:
        type: string
      id:
        type: string
      images:
        items:
          type: string
        type: array
      name:
        maxLength: 100
        minLength: 3
        type: string
      price:
        minimum: 0
        type: number
      updatedAt:
        type: string
    required:
    - amount
    - categoryId
    - images
    - name
    type: object
  model.Role:
    enum:
    - admin
    - manager
    - seller
    type: string
    x-enum-varnames:
    - AdminRole
    - Manager
    - Seller
  model.User:
    properties:
      clients:
        items:
          $ref: '#/definitions/model.Client'
        type: array
      createdAt:
        type: string
      id:
        type: string
      orders:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      role:
        $ref: '#/definitions/model.Role'
      updatedAt:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample swagger for Fiber
  termsOfService: http://swagger.io/terms/
  title: Fiber CRM-API
  version: "1.0"
paths:
  /images/upload:
    post:
      consumes:
      - multipart/form-data
      description: Эта функция позволяет загружать одно изображение на сервер с проверкой
        размера и типа файла
      parameters:
      - description: Файл изображения
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: 'Информация о загруженном файле: имя и URL'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный запрос или ошибка валидации
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при сохранении файла
          schema:
            additionalProperties: true
            type: object
      summary: Загрузка одной картинки
      tags:
      - Images
  /images/upload-many:
    post:
      consumes:
      - multipart/form-data
      description: Эта функция позволяет загружать несколько изображений на сервер
      parameters:
      - description: Файлы изображений
        in: formData
        name: images
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Список загруженных файлов с их URL
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный запрос или ошибка валидации
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при сохранении файла
          schema:
            additionalProperties: true
            type: object
      summary: Загрузить несколько изображений
      tags:
      - Images
  /orders:
    get:
      description: Эта функция возвращает список всех заказов с поддержкой пагинации.
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список заказов с информацией о пагинации
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при получении списка заказов
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Получить список всех заказов
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Эта функция позволяет продавцам и администраторам создать новый
        заказ. Заказ должен содержать как минимум один продукт.
      parameters:
      - description: Данные нового заказа
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Информация о созданном заказе
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный запрос или некорректные данные заказа
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Недостаточно прав для создания заказа
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Один из указанных продуктов не найден
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Ошибка валидации данных
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при создании заказа
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Создать заказ
      tags:
      - Orders
  /orders/{id}:
    get:
      description: Эта функция возвращает информацию о заказе по его уникальному идентификатору.
        Заказ включает все продукты в нём.
      parameters:
      - description: UUID заказа
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о заказе
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Некорректный формат UUID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Заказ не найден
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при получении данных заказа
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Получить заказ
      tags:
      - Orders
  /products:
    get:
      description: Эта функция возвращает список всех продуктов с пагинацией и возможностью
        подгрузки категорий
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список продуктов с информацией о пагинации
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при получении списка продуктов
          schema:
            additionalProperties: true
            type: object
      summary: Получить список продуктов
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Эта функция позволяет создать новый продукт
      parameters:
      - description: Данные нового продукта
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Информация о созданном продукте
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный формат запроса
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Ошибка валидации данных
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при создании продукта
          schema:
            additionalProperties: true
            type: object
      summary: Создать продукт
      tags:
      - Products
  /products/{id}:
    delete:
      description: Эта функция удаляет продукт по его уникальному идентификатору
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Сообщение об успешном удалении
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный формат запроса или отсутствующий ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Продукт не найден
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при удалении продукта
          schema:
            additionalProperties: true
            type: object
      summary: Удалить продукт
      tags:
      - Products
    get:
      description: Эта функция возвращает информацию о продукте по его уникальному
        идентификатору
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о продукте
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный запрос или отсутствующий ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Продукт не найден
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при получении продукта
          schema:
            additionalProperties: true
            type: object
      summary: Получить продукт
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Эта функция обновляет информацию о продукте по его уникальному
        идентификатору
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления продукта
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      produces:
      - application/json
      responses:
        "200":
          description: Информация об обновлённом продукте
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный формат запроса или отсутствующий ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Продукт не найден
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера при обновлении продукта
          schema:
            additionalProperties: true
            type: object
      summary: Обновить продукт
      tags:
      - Products
  /users:
    get:
      consumes:
      - application/json
      description: Возвращает список всех пользователей с поддержкой пагинации
      parameters:
      - description: Номер страницы (по умолчанию 1)
        in: query
        name: page
        type: integer
      - description: Размер страницы (по умолчанию 10)
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список пользователей
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка на сервере
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить список пользователей
      tags:
      - Пользователи
    post:
      consumes:
      - application/json
      description: Создаёт нового пользователя в системе
      parameters:
      - description: Данные пользователя
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно создан
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректный JSON
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: Ошибка валидации данных
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка на сервере
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создать пользователя
      tags:
      - Пользователи
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет пользователя из системы по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь успешно удалён
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный формат ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка на сервере
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Удалить пользователя
      tags:
      - Пользователи
    get:
      consumes:
      - application/json
      description: Возвращает информацию о пользователе по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Данные пользователя
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Неверный формат ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка на сервере
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить пользователя
      tags:
      - Пользователи
    put:
      consumes:
      - application/json
      description: Обновляет информацию о пользователе по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      - description: Обновляемые данные пользователя
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь успешно обновлён
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный формат ID или JSON
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: Ошибка валидации данных
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка на сервере
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновить данные пользователя
      tags:
      - Пользователи
swagger: "2.0"
